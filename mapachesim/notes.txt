
### Notes on things to improve

______________________________________________________________________________________
# To be added for CS64 MIPS usecase

* Need more clear way to keep mapping better between "name" <-> "register"
  e.g. (MIPS) $t0 -> R8 -> 0x8;  F8 -> $f8 -> 0x8;  decode is instruction dependent

* Better error messages for assembly syntax errors

* Error message for "li" pseudo-instructions

* Improve step output to include label and source code (e.g.)
  [0x00400010]    0x00c23021  addu $6, $6, $2                 ; 179: addu $a2 $a2 $v0
  [0x00400014]    0x0c100009  jal 0x00400024 [main]           ; 180: jal main

______________________________________________________________________________________
# To be fixed for handling multiple architectures reliable

* Refactor to add "instrcution name from func" and "func from instruction name" functions to isa.py

* Add checks to ensure the function name and op in docstring match (to catch copy/paste errors)

* Change register printing to account for non-32bit register sizes

* Alignment in the assembler needs to be generalized to not be tied to 32-bit words

______________________________________________________________________________________
# To be improved for readability and extensibility

* Right now Assember reaches way too far into the isa class.  The isa class might be refactored to
be a cleaner interface

* The simulation and ISA definition are together in a single class/interface.  It might be helpful
to figure out how those different functions might be seperated.

* Consider adding a lookup hierarchy for certian functions going from the  starting from the shell
and falling through to the machine.  This would allow the shell to overwrite defaults more cleanly
(e.g. start address and assembler).  Or perhaps handle through inheritence?


